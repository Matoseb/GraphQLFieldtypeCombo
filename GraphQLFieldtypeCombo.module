<?php

namespace ProcessWire;

use GraphQL\Type\Definition\Type;
use GraphQL\Type\Definition\ObjectType;
use GraphQL\Type\Definition\InputObjectType;

class GraphQLFieldtypeCombo extends WireData implements Module {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 * @return array
	 */
	public static function getModuleInfo() {

		return [
			'title' => 'GraphQLFieldtypeCombo',
			'version' => 2,
			'summary' => 'GraphQL support for FieldtypeCombo.',
			'href' => 'https://github.com/Matoseb/GraphQLFieldtypeCombo',
			'icon' => 'globe',
			'requires' => ['FieldtypeCombo']
		];
	}

	public static function getType(Field $field) {

		$subfields = $field->getComboSettings()->getSubfields();

		bd($subfields);
		
		$desc = $field->description;
      	if (!$desc) {
        	$desc = "Field with the type of {$field->type}.";
      	}



		return new ObjectType([
			'name' => $field->name,
			'description' => $desc,
			'fields' => self::getFields($subfields),
		]);
	}


	public static function getFields($subfields) {
    $fields = [];

    foreach ($subfields as $field) {
      $fieldClass = self::pwSubfieldToGraphqlClass($field);
      if (is_null($fieldClass)) {
        continue;
      }

	  //TODO check permissions

      $fieldSettings = $fieldClass::field($field);

      if ($field->required) {
        $fieldSettings['type'] = Type::nonNull($fieldSettings['type']);
      }

      $fields[] = $fieldSettings;

    }

    return $fields;
  }

  public static function pwSubfieldToGraphqlClass($subfield)
  {

	// replace underscores with empty
	$type = str_replace('_', '', $subfield->type);

    // use local field if available
    $className =
      "\\ProcessWire\\GraphQL\\Type\\Fieldtype\\Fieldtype" . $type;



    if (class_exists($className)) {
      return $className;
    }

    //TODO third party field

    return null;
  }

	public static function getInputType(Field $field)
	{

	$subfields = $field->getComboSettings()->getSubfields();

	return new InputObjectType([
		'name' => 'ComboInput',
		'fields' => self::getFields($subfields),
	]);
	}

	//TODO set value type
}